{"version":3,"sources":["components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","api/api.js","api/posts.js","api/comments.js","components/Loader/Loader.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["PostsList","posts","setPostId","selectedPostId","className","map","post","key","id","userId","title","type","onClick","NewCommentForm","postComment","useState","nameQuery","setName","emailQuery","setEmail","bodyQuery","setBody","hasOnlySpaces","setSpacesStatus","handleChange","event","target","name","value","onSubmit","preventDefault","trim","placeholder","onChange","required","request","url","option","a","fetch","response","ok","Error","status","statusText","json","getUserPosts","data","filter","getPostDetails","postId","getPostComments","comments","comment","deleteCommentFromServer","commentId","method","result","postCommentToServer","body","JSON","stringify","Loader","PostDetails","React","memo","currentPost","setPost","setComments","commentsVisibility","toggleComments","loadPost","loadComments","loadedComments","deleteComment","email","useEffect","length","App","selectedUserId","selectUser","setPosts","loadPosts","postsFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1ea21799.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\n\nexport const PostsList = ({\n  posts,\n  setPostId,\n  selectedPostId,\n}) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {posts.map(post => (\n        <li key={post.id} className=\"PostsList__item\">\n          <div>\n            <b>\n              [User\n              {post.userId}\n              ]:\n              {' '}\n            </b>\n            {post.title}\n          </div>\n          {selectedPostId !== post.id\n            ? (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  setPostId(post.id);\n                }}\n              >\n                Open\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  setPostId(0);\n                }}\n              >\n                Close\n              </button>\n            )\n          }\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object).isRequired,\n  setPostId: PropTypes.func.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ postComment }) => {\n  const [nameQuery, setName] = useState('');\n  const [emailQuery, setEmail] = useState('');\n  const [bodyQuery, setBody] = useState('');\n  const [hasOnlySpaces, setSpacesStatus] = useState(false);\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'email':\n        setEmail(value);\n        break;\n      case 'body':\n        setBody(value);\n        break;\n      default:\n        break;\n    }\n\n    if (hasOnlySpaces) {\n      setSpacesStatus(false);\n    }\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (\n      nameQuery.trim()\n      && emailQuery.trim()\n      && bodyQuery.trim()) {\n      postComment([nameQuery, emailQuery, bodyQuery]);\n\n      setName('');\n      setEmail('');\n      setBody('');\n    }\n\n    setSpacesStatus(true);\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={nameQuery}\n          onChange={handleChange}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={emailQuery}\n          onChange={handleChange}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={bodyQuery}\n          onChange={handleChange}\n          required\n        />\n      </div>\n      {hasOnlySpaces\n        && (\n          <div className=\"NewCommentForm__has-spaces\">\n            The fields cannot contain only spaces\n          </div>\n        )\n      }\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postComment: PropTypes.func.isRequired,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = async(url, option) => {\n  try {\n    const response = await fetch(`${BASE_URL}${url}`, option);\n\n    if (!response.ok) {\n      throw new Error(`\n          ${response.status} - ${response.statusText}\n        `);\n    }\n\n    return response.json();\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n","import { request } from './api';\n\nexport const getUserPosts = async(userId) => {\n  const posts = await request('/posts');\n\n  if (userId === 0) {\n    return posts.data;\n  }\n\n  return posts.data.filter(post => post.userId === userId);\n};\n\nexport const getPostDetails = async(postId) => {\n  const post = await request(`/posts/${postId}`);\n\n  return post.data;\n};\n","import { request } from './api';\n\nexport const getPostComments = async(postId) => {\n  const comments = await request('/comments');\n\n  return comments.data.filter(comment => comment.postId === postId);\n};\n\nexport const deleteCommentFromServer = async(commentId) => {\n  const result = await request(`/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n\n  return result.data;\n};\n\nexport const postCommentToServer = async(data) => {\n  const result = await request('/comments', {\n    method: 'POST',\n    body: JSON.stringify(data),\n  });\n\n  return result.data;\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getPostDetails } from '../../api/posts';\n// eslint-disable-next-line max-len\nimport { getPostComments, deleteCommentFromServer, postCommentToServer } from '../../api/comments';\nimport { Loader } from '../Loader';\nimport './PostDetails.scss';\n\nexport const PostDetails = React.memo(({ selectedPostId }) => {\n  const [currentPost, setPost] = useState(null);\n  const [comments, setComments] = useState(null);\n  const [commentsVisibility, toggleComments] = useState(true);\n\n  const loadPost = async(postId) => {\n    const post = await getPostDetails(postId);\n\n    setPost(post);\n  };\n\n  const loadComments = async(postId) => {\n    const loadedComments = await getPostComments(postId);\n\n    setComments(loadedComments);\n  };\n\n  const deleteComment = async(commentId) => {\n    await deleteCommentFromServer(commentId);\n\n    loadComments(selectedPostId);\n  };\n\n  const postComment = async(data) => {\n    const [nameQuery, emailQuery, bodyQuery] = data;\n\n    await postCommentToServer({\n      postId: selectedPostId,\n      name: nameQuery,\n      email: emailQuery,\n      body: bodyQuery,\n    });\n\n    loadComments(selectedPostId);\n  };\n\n  useEffect(() => {\n    loadPost(selectedPostId);\n    loadComments(selectedPostId);\n  }, [selectedPostId]);\n\n  if (!currentPost || !comments) {\n    return (\n      <Loader />\n    );\n  }\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>\n          {currentPost.title}\n        </p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {!commentsVisibility\n          ? (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => {\n                toggleComments(!commentsVisibility);\n              }}\n            >\n              Show\n              {` ${comments.length} `}\n              Comments\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => {\n                toggleComments(!commentsVisibility);\n              }}\n            >\n              Hide Comments\n            </button>\n          )\n        }\n\n        {comments && commentsVisibility\n          && (\n            <ul className=\"PostDetails__list\">\n              {comments.map(comment => (\n                <li\n                  className=\"PostDetails__list-item\"\n                  key={comment.id}\n                >\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => {\n                      deleteComment(comment.id);\n                    }}\n                  >\n                    X\n                  </button>\n                  <p>\n                    {comment.body}\n                  </p>\n\n                  <span className=\"PostDetails__name\">\n                    {comment.name}\n                  </span>\n                </li>\n              ))}\n            </ul>\n          )\n        }\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm postComment={postComment} />\n        </div>\n      </section>\n    </div>\n  );\n});\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts } from './api/posts';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nconst App = () => {\n  const [selectedUserId, selectUser] = useState(0);\n  const [selectedPostId, setPostId] = useState(0);\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    loadPosts(selectedUserId);\n  }, [selectedUserId]);\n\n  const loadPosts = async(userId) => {\n    const postsFromServer = await getUserPosts(userId);\n\n    setPosts(postsFromServer);\n  };\n\n  const handleChange = (event) => {\n    selectUser(+event.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUserId}\n            onChange={handleChange}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            userId={selectedUserId}\n            setPostId={setPostId}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId\n            ? <PostDetails selectedPostId={selectedPostId} />\n            : 'No select detail'\n          }\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}