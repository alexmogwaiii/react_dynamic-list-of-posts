{"version":3,"sources":["components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","api/api.js","api/posts.js","api/comments.js","components/Loader/Loader.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["PostsList","posts","setPostId","selectedPostId","className","map","post","key","id","userId","title","type","onClick","NewCommentForm","postComment","useState","nameQuery","setName","emailQuery","setEmail","bodyQuery","setBody","handleChange","event","target","name","value","onSubmit","preventDefault","placeholder","onChange","request","url","option","a","fetch","response","ok","Error","status","statusText","json","getUserPosts","data","filter","getPostDetails","postId","getPostComments","comments","comment","deleteCommentFromServer","commentId","method","result","postCommentToServer","body","JSON","stringify","Loader","PostDetails","React","memo","currentPost","setPost","setComments","commentsVisibility","toggleComments","loadPost","loadComments","loadedComments","deleteComment","console","log","warn","email","useEffect","length","App","selectedUser","selectUser","setPosts","postsFromServer","loadPosts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7f94a57f.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\n\nexport const PostsList = ({\n  posts,\n  setPostId,\n  selectedPostId,\n}) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {posts.map(post => (\n        <li key={post.id} className=\"PostsList__item\">\n          <div>\n            <b>\n              [User\n              {post.userId}\n              ]:\n              {' '}\n            </b>\n            {post.title}\n          </div>\n          {selectedPostId !== post.id\n            ? (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  setPostId(post.id);\n                }}\n              >\n                Open\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  setPostId(0);\n                }}\n              >\n                Close\n              </button>\n            )\n          }\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object).isRequired,\n  setPostId: PropTypes.func.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ postComment }) => {\n  const [nameQuery, setName] = useState('');\n  const [emailQuery, setEmail] = useState('');\n  const [bodyQuery, setBody] = useState('');\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'email':\n        setEmail(value);\n        break;\n      case 'body':\n        setBody(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (nameQuery && emailQuery && bodyQuery) {\n      postComment([nameQuery, emailQuery, bodyQuery]);\n    }\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={nameQuery}\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={emailQuery}\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={bodyQuery}\n          onChange={handleChange}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postComment: PropTypes.func.isRequired,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = async(url, option) => {\n  try {\n    const response = await fetch(`${BASE_URL}${url}`, option);\n\n    if (!response.ok) {\n      throw new Error(`\n          ${response.status} - ${response.statusText}\n        `);\n    }\n\n    return response.json();\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n","import { request } from './api';\n\nexport const getUserPosts = async(userId) => {\n  const posts = await request('/posts');\n\n  if (userId === 0) {\n    return posts.data;\n  }\n\n  return posts.data.filter(post => post.userId === userId);\n};\n\nexport const getPostDetails = async(postId) => {\n  const post = await request(`/posts/${postId}`);\n\n  return post.data;\n};\n","import { request } from './api';\n\nexport const getPostComments = async(postId) => {\n  const comments = await request('/comments');\n\n  return comments.data.filter(comment => comment.postId === postId);\n};\n\nexport const deleteCommentFromServer = async(commentId) => {\n  const result = await request(`/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n\n  return result.data;\n};\n\nexport const postCommentToServer = async(data) => {\n  const result = await request('/comments', {\n    method: 'POST',\n    body: JSON.stringify(data),\n  });\n\n  return result.data;\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getPostDetails } from '../../api/posts';\n// eslint-disable-next-line max-len\nimport { getPostComments, deleteCommentFromServer, postCommentToServer } from '../../api/comments';\nimport { Loader } from '../Loader';\nimport './PostDetails.scss';\n\nexport const PostDetails = React.memo(({ selectedPostId }) => {\n  const [currentPost, setPost] = useState(null);\n  const [comments, setComments] = useState(null);\n  const [commentsVisibility, toggleComments] = useState(true);\n\n  const loadPost = async(postId) => {\n    const post = await getPostDetails(postId);\n\n    setPost(post);\n  };\n\n  const loadComments = async(postId) => {\n    const loadedComments = await getPostComments(postId);\n\n    setComments(loadedComments);\n  };\n\n  const deleteComment = async(commentId) => {\n    try {\n      const comment = await deleteCommentFromServer(commentId);\n\n      loadComments(selectedPostId);\n      // eslint-disable-next-line no-console\n      console.log(`Comment ${comment.id} was deleted`);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.warn(`Something went wrond - ${error}`);\n    }\n  };\n\n  const postComment = async(data) => {\n    const [nameQuery, emailQuery, bodyQuery] = data;\n\n    try {\n      const comment = await postCommentToServer({\n        postId: selectedPostId,\n        name: nameQuery,\n        email: emailQuery,\n        body: bodyQuery,\n      });\n\n      loadComments(selectedPostId);\n      // eslint-disable-next-line no-console\n      console.log(`Post ${comment.id} was added`);\n    } catch (error) {\n      throw new Error(error);\n    }\n  };\n\n  useEffect(() => {\n    loadPost(selectedPostId);\n    loadComments(selectedPostId);\n  }, [selectedPostId]);\n\n  if (!currentPost) {\n    return (\n      <Loader />\n    );\n  }\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>\n          {currentPost.title}\n        </p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {!commentsVisibility\n          ? (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => {\n                toggleComments(!commentsVisibility);\n              }}\n            >\n              Show\n              {` ${comments.length} `}\n              Comments\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => {\n                toggleComments(!commentsVisibility);\n              }}\n            >\n              Hide Comments\n            </button>\n          )\n        }\n\n        {comments && commentsVisibility\n          && (\n            <ul className=\"PostDetails__list\">\n              {comments.map(comment => (\n                <li\n                  className=\"PostDetails__list-item\"\n                  key={comment.id}\n                >\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => {\n                      deleteComment(comment.id);\n                    }}\n                  >\n                    X\n                  </button>\n                  <p>\n                    {comment.body}\n                  </p>\n\n                  <span className=\"PostDetails__name\">\n                    {comment.name}\n                  </span>\n                </li>\n              ))}\n            </ul>\n          )\n        }\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm postComment={postComment} />\n        </div>\n      </section>\n    </div>\n  );\n});\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts } from './api/posts';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nconst App = () => {\n  const [selectedUser, selectUser] = useState(0);\n  const [selectedPostId, setPostId] = useState(0);\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    const loadPosts = async() => {\n      const postsFromServer = await getUserPosts(selectedUser);\n\n      setPosts(postsFromServer);\n    };\n\n    loadPosts();\n  }, [selectedUser]);\n\n  const handleChange = (event) => {\n    selectUser(+event.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUser}\n            onChange={handleChange}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            userId={selectedUser}\n            setPostId={setPostId}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId\n            ? <PostDetails selectedPostId={selectedPostId} />\n            : 'No select detail'\n          }\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}